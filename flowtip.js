// Generated by CoffeeScript 1.6.3
(function() {
  this.FlowTip = (function() {
    FlowTip.prototype.FlowTip = "2.0";

    function FlowTip(options) {
      var option;
      if (options == null) {
        options = {};
      }
      this.visible = false;
      this.target = null;
      for (option in options) {
        if (_.has(options, option) && options[option] !== void 0) {
          this[option] = options[option];
        }
      }
    }

    FlowTip.prototype.className = "";

    FlowTip.prototype.contentClassName = "";

    FlowTip.prototype.tailClassName = "";

    FlowTip.prototype.appendTo = null;

    FlowTip.prototype.tooltipContent = null;

    FlowTip.prototype.region = "top";

    FlowTip.prototype.topDisabled = false;

    FlowTip.prototype.bottomDisabled = false;

    FlowTip.prototype.leftDisabled = false;

    FlowTip.prototype.rightDisabled = false;

    FlowTip.prototype.hideInDisabledRegions = false;

    FlowTip.prototype.persevere = false;

    FlowTip.prototype.hasTail = true;

    FlowTip.prototype.width = null;

    FlowTip.prototype.height = "auto";

    FlowTip.prototype.minWidth = null;

    FlowTip.prototype.minHeight = null;

    FlowTip.prototype.maxWidth = null;

    FlowTip.prototype.maxHeight = null;

    FlowTip.prototype.tailWidth = 20;

    FlowTip.prototype.tailHeight = 10;

    FlowTip.prototype.animated = false;

    FlowTip.prototype.targetOffset = 10;

    FlowTip.prototype.targetOffsetFrom = "root";

    FlowTip.prototype.edgeOffset = 30;

    FlowTip.prototype.rotationOffset = 30;

    FlowTip.prototype.targetAlign = "center";

    FlowTip.prototype.targetAlignOffset = 0;

    FlowTip.prototype.rootAlign = "center";

    FlowTip.prototype.rootAlignOffset = 0;

    FlowTip.prototype.render = function() {
      if (this.$root) {
        return this._renderContent();
      }
      this.root = document.createElement("div");
      this.root.className = "flowtip " + this.className;
      this.root.style.position = "absolute";
      this.root.style.display = "none";
      this.content = document.createElement("div");
      this.content.className = "flowtip-content " + this.contentClassName;
      this._renderContent();
      this._repositionCount = 0;
      this.root.appendChild(this.content);
      this.tail = document.createElement("div");
      this.tail.className = "flowtip-tail " + this.tailClassName;
      this.tail.style.position = "absolute";
      this.tail.appendChild(document.createElement("div"));
      this.root.appendChild(this.tail);
      this.$root = $(this.root);
      this.$content = $(this.content);
      this.$tail = $(this.tail);
      this.$appendTo = $(this.appendTo || (this.appendTo = document.body));
      this.appendTo = this.$appendTo[0];
      return this._insertToDOM();
    };

    FlowTip.prototype.setAppendTo = function(appendTo) {
      this.$appendTo = $(appendTo);
      this.appendTo = this.$appendTo[0];
      if (this.$root) {
        return this._insertToDOM();
      }
    };

    FlowTip.prototype.setTarget = function(target) {
      this.$target = $(target);
      return this.target = this.$target[0];
    };

    FlowTip.prototype.setTooltipContent = function(content, options) {
      if (options == null) {
        options = {};
      }
      this.tooltipContent = content;
      if (options.render) {
        return this.render();
      }
    };

    FlowTip.prototype.reposition = function() {
      if (!this.target) {
        return;
      }
      this.$root.width(this.width);
      this.$root.height(this.height);
      this.$root.css({
        minWidth: this.minWidth,
        minHeight: this.minHeight,
        maxWidth: this.maxWidth,
        maxHeight: this.maxHeight
      });
      if (this.width === "auto" || this.height === "auto") {
        this.content.style.position = "relative";
      }
      this.$tail.width(this.tailWidth);
      this.$tail.height(this.tailHeight);
      this._updateRegion();
      return this._updatePosition();
    };

    FlowTip.prototype.show = function() {
      var _this = this;
      if (this.visible) {
        return;
      }
      this.render();
      this.visible = true;
      this.root.style.opacity = 0;
      this.root.style.display = "block";
      return _.delay(function() {
        _this.reposition();
        _this.root.style.opacity = 1;
        if (_this.animated) {
          _this.$root.addClass("animated");
        }
        return _this.trigger("show");
      }, 16);
    };

    FlowTip.prototype.hide = function() {
      if (!this.visible) {
        return;
      }
      this.visible = false;
      this.root.style.display = "none";
      this.trigger("hide");
      return this.$root.removeClass("animated");
    };

    FlowTip.prototype.trigger = function(eventName) {
      return this.$root.trigger("" + eventName + ".flowtip");
    };

    FlowTip.prototype.destroy = function() {
      if (this.$root) {
        return this.$root.remove();
      }
    };

    FlowTip.prototype._availableRegion = function(region) {
      return !this["" + region + "Disabled"];
    };

    FlowTip.prototype._fitsInRegion = function(region) {
      var parentParameter, position, rootDimension;
      position = this._calculatePosition(region);
      rootDimension = this._rootDimension();
      parentParameter = this._parentParameter();
      switch (region) {
        case "top":
          return position.top - this.edgeOffset >= 0;
        case "bottom":
          return position.top + rootDimension.height + this.edgeOffset <= parentParameter.height;
        case "left":
          return position.left - this.edgeOffset >= 0;
        case "right":
          return position.left + rootDimension.width + this.edgeOffset <= parentParameter.width;
      }
    };

    FlowTip.prototype._availableAndFitsIn = function(regions, regionParameter, _first) {
      var region;
      _first || (_first = regions[0]);
      region = regions[0];
      if (!regions || regions.length <= 0) {
        if (this.hideInDisabledRegions) {
          return _first;
        } else {
          return this._region;
        }
      }
      if (regionParameter[region].availables && regionParameter[region].fits) {
        return region;
      } else {
        return this._availableAndFitsIn(regions.slice(1), regionParameter, _first);
      }
    };

    FlowTip.prototype._updateRegion = function(position) {
      var parentParameter, regionParameter, rotateOptions, targetParameter, _ref, _ref1;
      this._region || (this._region = this.region);
      if (this.persevere) {
        this._region = this.region;
      }
      parentParameter = this._parentParameter();
      targetParameter = this._targetParameter();
      regionParameter = this._regionParameter();
      if (this._region === "top" && !regionParameter.top.fits) {
        this._region = this._availableAndFitsIn(["bottom", "left", "right"], regionParameter);
      } else if (this._region === "bottom" && !regionParameter.bottom.fits) {
        this._region = this._availableAndFitsIn(["top", "left", "right"], regionParameter);
      } else if (this._region === "left" && !regionParameter.left.fits) {
        this._region = this._availableAndFitsIn(["right", "top", "bottom"], regionParameter);
      } else if (this._region === "right" && !regionParameter.right.fits) {
        this._region = this._availableAndFitsIn(["left", "top", "bottom"], regionParameter);
      }
      if (((_ref = this._region) === "top" || _ref === "bottom") && !regionParameter.top.fits && !regionParameter.bottom.fits) {
        this._region = this._availableAndFitsIn(["left", "right"], regionParameter);
      } else if (((_ref1 = this._region) === "left" || _ref1 === "right") && !regionParameter.left.fits && !regionParameter.right.fits) {
        this._region = this._availableAndFitsIn(["top", "bottom"], regionParameter);
      }
      rotateOptions = (function() {
        switch (this._region) {
          case "top":
          case "bottom":
            if (parentParameter.width - (targetParameter.left + (targetParameter.width / 2)) - this.edgeOffset < this.rotationOffset) {
              if (this._region === "top") {
                return ["left", "bottom"];
              } else {
                return ["left", "top"];
              }
            } else if (targetParameter.left + (targetParameter.width / 2) - this.edgeOffset < this.rotationOffset) {
              if (this._region === "top") {
                return ["right", "bottom"];
              } else {
                return ["right", "top"];
              }
            }
            break;
          case "left":
          case "right":
            if (parentParameter.height - (targetParameter.top + (targetParameter.height / 2)) - this.edgeOffset < this.rotationOffset) {
              if (this._region === "left") {
                return ["top", "right"];
              } else {
                return ["top", "left"];
              }
            } else if (targetParameter.top + (targetParameter.height / 2) - this.edgeOffset < this.rotationOffset) {
              if (this._region === "left") {
                return ["bottom", "right"];
              } else {
                return ["bottom", "left"];
              }
            }
        }
      }).call(this);
      if (rotateOptions) {
        return this._region = this._availableAndFitsIn(rotateOptions, regionParameter);
      }
    };

    FlowTip.prototype._updatePosition = function(position) {
      var contentHeight, contentOuterHeight, contentSpacing, rootHeight;
      position = this._calculatePosition(this._region);
      this.root.style.top = "" + (Math.round(position.top) + this.$appendTo.scrollTop()) + "px";
      this.root.style.left = "" + (Math.round(position.left) + this.$appendTo.scrollLeft()) + "px";
      rootHeight = this.$root.height();
      contentHeight = this.$content.height();
      contentOuterHeight = this.$content.outerHeight(true);
      contentSpacing = contentOuterHeight - contentHeight;
      if (contentOuterHeight > rootHeight) {
        this.content.style.maxHeight = "" + (rootHeight - contentSpacing) + "px";
        this.$root.addClass("content-overflow");
      }
      if (this.hasTail) {
        this.tail.style.display = "block";
        this.tail.style.top = "" + (Math.round(position.tail.top)) + "px";
        this.tail.style.left = "" + (Math.round(position.tail.left)) + "px";
        this.tail.style.width = "" + position.tail.width + "px";
        this.tail.style.height = "" + position.tail.height + "px";
        this.tail.className = "flowtip-tail " + this.tailClassName + " " + (this._tailType(this._region));
        this.root.className = this.root.className.replace(/tail-at-[\w]+/, "");
        this.root.className = "" + this.root.className + " tail-at-" + (this._tailType(this._region));
      } else {
        this.tail.style.display = "none";
      }
      if (!this._availableRegion(this._region)) {
        return this.root.style.opacity = 0;
      } else {
        return this.root.style.opacity = 1;
      }
    };

    FlowTip.prototype._calculatePosition = function(region) {
      var effectiveTargetOffset, parentParameter, position, rootDimension, tailDimension, tailHeight, tailWidth, targetParameter;
      rootDimension = this._rootDimension();
      parentParameter = this._parentParameter();
      targetParameter = this._targetParameter();
      tailWidth = 0;
      tailHeight = 0;
      if (this.hasTail) {
        tailDimension = this._tailDimension(region);
        tailWidth = tailDimension.width;
        tailHeight = tailDimension.height;
      }
      position = {};
      effectiveTargetOffset = this.targetOffsetFrom === "root" ? this.targetOffset : this.targetOffsetFrom === "tail" ? region === "top" || region === "bottom" ? tailHeight + this.targetOffset : region === "left" || region === "right" ? tailWidth + this.targetOffset : void 0 : void 0;
      switch (region) {
        case "top":
          position = {
            top: targetParameter.top - rootDimension.height - effectiveTargetOffset,
            left: this._rootPivot(region, targetParameter, rootDimension),
            tail: {
              top: rootDimension.height
            }
          };
          break;
        case "bottom":
          position = {
            top: targetParameter.top + targetParameter.height + effectiveTargetOffset,
            left: this._rootPivot(region, targetParameter, rootDimension),
            tail: {
              top: -tailHeight
            }
          };
          break;
        case "left":
          position = {
            top: this._rootPivot(region, targetParameter, rootDimension),
            left: targetParameter.left - rootDimension.width - effectiveTargetOffset,
            tail: {
              left: rootDimension.width
            }
          };
          break;
        case "right":
          position = {
            top: this._rootPivot(region, targetParameter, rootDimension),
            left: targetParameter.left + targetParameter.width + effectiveTargetOffset,
            tail: {
              left: -tailWidth
            }
          };
      }
      switch (region) {
        case "top":
        case "bottom":
          if (position.left < this.edgeOffset) {
            position.left = this.edgeOffset;
          } else if (position.left + rootDimension.width > parentParameter.width - this.edgeOffset) {
            position.left = parentParameter.width - rootDimension.width - this.edgeOffset;
          }
          break;
        case "left":
        case "right":
          if (position.top < this.edgeOffset) {
            position.top = this.edgeOffset;
          } else if (position.top + rootDimension.height > parentParameter.height - this.edgeOffset) {
            position.top = parentParameter.height - rootDimension.height - this.edgeOffset;
          }
      }
      if (this.hasTail) {
        position.tail = (function() {
          switch (region) {
            case "top":
              return {
                top: rootDimension.height,
                left: this._tailPivot(region, targetParameter, tailDimension, position)
              };
            case "bottom":
              return {
                top: -tailHeight,
                left: this._tailPivot(region, targetParameter, tailDimension, position)
              };
            case "left":
              return {
                top: this._tailPivot(region, targetParameter, tailDimension, position),
                left: rootDimension.width
              };
            case "right":
              return {
                top: this._tailPivot(region, targetParameter, tailDimension, position),
                left: -tailWidth
              };
          }
        }).call(this);
        position.tail.width = tailWidth;
        position.tail.height = tailHeight;
      }
      return position;
    };

    FlowTip.prototype._insertToDOM = function() {
      var position;
      position = this.$appendTo.css("position");
      if (position !== "relative" && position !== "absolute" && position !== "fixed") {
        position = "relative";
      }
      this.appendTo.style.position = position;
      return this.appendTo.appendChild(this.root);
    };

    FlowTip.prototype._renderContent = function() {
      if (typeof this.tooltipContent === "string") {
        return $(this.content).html(this.tooltipContent);
      } else {
        this.$tooltipContent = $(this.tooltipContent);
        this.content.innerHTML = "";
        if (this.$tooltipContent.length) {
          return this.content.appendChild(this.$tooltipContent[0]);
        }
      }
    };

    FlowTip.prototype._rootPivot = function(region, targetParameter, rootDimension) {
      var effectiveOffset, pivot, pivots, positive, rootAlign, rootAlignOffset, targetPivot;
      targetPivot = this._targetPivot(region, targetParameter);
      rootAlign = this._rootAlign(region);
      rootAlignOffset = this._rootAlignOffset(region);
      if (rootAlign === "center") {
        pivot = region === "top" || region === "bottom" ? targetPivot - (rootDimension.width / 2) : region === "left" || region === "right" ? targetPivot - (rootDimension.height / 2) : void 0;
        effectiveOffset = region === "top" || region === "right" ? rootAlignOffset : region === "bottom" || region === "left" ? -rootAlignOffset : void 0;
      } else if (rootAlign === "edge") {
        pivots = region === "top" || region === "bottom" ? [targetPivot, targetPivot - rootDimension.width] : region === "left" || region === "right" ? [targetPivot, targetPivot - rootDimension.height] : void 0;
        positive = rootAlignOffset >= 0;
        pivot = region === "top" || region === "right" ? positive ? pivots[1] : pivots[0] : region === "bottom" || region === "left" ? positive ? pivots[0] : pivots[1] : void 0;
        effectiveOffset = region === "top" || region === "right" ? rootAlignOffset : region === "bottom" || region === "left" ? -rootAlignOffset : void 0;
      }
      return pivot + effectiveOffset + this._targetAlignmentOffset(region, targetParameter);
    };

    FlowTip.prototype._tailPivot = function(region, targetParameter, tailDimension, rootPosition) {
      var effectiveOffset, pivot, targetPivot;
      targetPivot = this._targetPivot(region, targetParameter);
      pivot = region === "top" || region === "bottom" ? targetPivot - rootPosition.left - (tailDimension.width / 2) : region === "left" || region === "right" ? targetPivot - rootPosition.top - (tailDimension.height / 2) : void 0;
      effectiveOffset = this._targetAlignmentOffset(region, targetParameter);
      return pivot + effectiveOffset;
    };

    FlowTip.prototype._targetPivot = function(region, targetParameter) {
      var pivot, pivots, positive, targetAlign, targetAlignOffset;
      targetAlign = this._targetAlign(region);
      targetAlignOffset = this._targetAlignOffset(region);
      if (targetAlign === "center") {
        pivot = region === "top" || region === "bottom" ? targetParameter.left + (targetParameter.width / 2) : region === "left" || region === "right" ? targetParameter.top + (targetParameter.height / 2) : void 0;
      } else if (targetAlign === "edge") {
        pivots = region === "top" || region === "bottom" ? [targetParameter.left, targetParameter.left + targetParameter.width] : region === "left" || region === "right" ? [targetParameter.top, targetParameter.top + targetParameter.height] : void 0;
        positive = targetAlignOffset >= 0;
        pivot = region === "top" || region === "right" ? positive ? pivots[1] : pivots[0] : region === "bottom" || region === "left" ? positive ? pivots[0] : pivots[1] : void 0;
      }
      return pivot;
    };

    FlowTip.prototype._targetAlignmentOffset = function(region, targetParameter) {
      var positive, targetAlign, targetAlignOffset;
      targetAlign = this._targetAlign(region);
      targetAlignOffset = this._targetAlignOffset(region);
      if (targetAlign === "center") {
        if (region === "top" || region === "right") {
          return targetAlignOffset;
        } else if (region === "bottom" || region === "left") {
          return -targetAlignOffset;
        }
      } else if (targetAlign === "edge") {
        positive = targetAlignOffset >= 0;
        if (region === "top" || region === "right") {
          return -targetAlignOffset;
        } else if (region === "bottom" || region === "left") {
          return targetAlignOffset;
        }
      }
    };

    FlowTip.prototype._rootAlign = function(region) {
      return this["" + region + "RootAlign"] || this.rootAlign;
    };

    FlowTip.prototype._rootAlignOffset = function(region) {
      return this["" + region + "RootAlignOffset"] || this.rootAlignOffset;
    };

    FlowTip.prototype._targetAlign = function(region) {
      return this["" + region + "TargetAlign"] || this.targetAlign;
    };

    FlowTip.prototype._targetAlignOffset = function(region) {
      return this["" + region + "TargetAlignOffset"] || this.targetAlignOffset;
    };

    FlowTip.prototype._rootDimension = function() {
      return {
        width: this.$root.width(),
        height: this.$root.height()
      };
    };

    FlowTip.prototype._tailDimension = function(region) {
      var dimension, height, width;
      dimension = this.tail.getAttribute("original-width") && this.tail.getAttribute("original-height") ? {
        width: parseInt(this.tail.getAttribute("original-width")),
        height: parseInt(this.tail.getAttribute("original-height"))
      } : (this.tail.setAttribute("original-width", width = this.$tail.width()), this.tail.setAttribute("original-height", height = this.$tail.height()), {
        width: width,
        height: height
      });
      if (region === "left" || region === "right") {
        return {
          width: dimension.height,
          height: dimension.width
        };
      } else {
        return dimension;
      }
    };

    FlowTip.prototype._tailType = function(region) {
      switch (region) {
        case "top":
          return "bottom";
        case "bottom":
          return "top";
        case "left":
          return "right";
        case "right":
          return "left";
      }
    };

    FlowTip.prototype._targetParameter = function() {
      var parentOffset, targetOffset;
      targetOffset = this.$target.offset();
      parentOffset = this.$appendTo.offset();
      return {
        top: targetOffset.top - parentOffset.top,
        left: targetOffset.left - parentOffset.left,
        height: this.$target.outerHeight(),
        width: this.$target.outerWidth()
      };
    };

    FlowTip.prototype._parentParameter = function() {
      var parentOffset;
      parentOffset = this.$appendTo.offset();
      return {
        top: parentOffset.top,
        left: parentOffset.left,
        height: this.$appendTo.outerHeight(),
        width: this.$appendTo.outerWidth()
      };
    };

    FlowTip.prototype._regionParameter = function() {
      return {
        top: {
          fits: this._fitsInRegion("top"),
          availables: this._availableRegion("top")
        },
        bottom: {
          fits: this._fitsInRegion("bottom"),
          availables: this._availableRegion("bottom")
        },
        left: {
          fits: this._fitsInRegion("left"),
          availables: this._availableRegion("left")
        },
        right: {
          fits: this._fitsInRegion("right"),
          availables: this._availableRegion("right")
        }
      };
    };

    return FlowTip;

  })();

}).call(this);
